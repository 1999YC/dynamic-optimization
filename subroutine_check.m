%本程序用来对梯度计算子程序(funocfe.m,cfunocfe.m)的准确性进行验证，验证方法是将子程序得到的梯度与差分法得到的梯度进行比较
warning off
clear 
clc
global Lt La1 La T;
global f fx fu L Lx Lu cL cLx cLu n lx lu Nh NO;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
NO=1;%NO+1为有限单元上取的配置点数,配置点适当增加，则求解越精确，但是求解时间越长
Nh=1;%有限元长度，有限单元数过大会导致微分方程模拟失败，应当选<20为好

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
mu=0.01;beta=4e-5;rho=0.00;%参数设置
% f=@(x,u)[-beta*x(1)*x(2)-u*x(1),beta*x(1)*x(2)-mu*x(2),-rho*x(3)];
% fx=@(x,u)[-beta*x(2)-u,-beta*x(1),0;beta*x(2),beta*x(1)-mu,0;0,0,-rho];
% fu=@(x,u)[-x(1);0;0];
f=@(x,u)[-beta*(1-u(1))*x(1)*x(2)-u(2)*x(1),beta*(1-u(1))*x(1)*x(2)-mu*x(2),-rho*x(3)];
fx=@(x,u)[-beta*(1-u(1))*x(2)-u(2),-beta*(1-u(1))*x(1),0;beta*(1-u(1))*x(2),beta*(1-u(1))*x(1)-mu,0;0,0,-rho];
fu=@(x,u)[beta*x(1)*x(2) -x(1);-beta*x(1)*x(2) 0;0 0];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
c=1;ku=1;%被积函数参数设置
%  L=@(x,u)(c*x(2)+ku*u)*x(3);Lx=@(x,u)[0,c*x(3),(c*x(2)+ku*u)];Lu=@(x,u)ku*x(3);%目标中的积分函数
 L=@(x,u)c*x(2)*x(3)+ku*u(2)*x(3);Lx=@(x,u)[0,c*x(3),(c*x(2)+ku*u(2))];Lu=@(x,u)[0,ku*x(3)];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
cmax=10;%单日最大隔离人数
% cL=@(x,u)u*x(1)-cmax;cLx=@(x,u)[u,0,0];cLu=@(x,u)x(1);%逐点约束函数及其对x,u的梯度函数
cL=@(x,u)u(2)*x(1)-cmax;cLx=@(x,u)[u(2),0,0];cLu=@(x,u)[0,x(1)];%逐点约束函数及其对x,u的梯度函数

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
x0=[1000,100,1];
lx=length(x0);
n=10;%有限单元个数，每一个有限单元上取相同的控制，因此n也相当于控制分段数，
lu=2;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
U=0.0001*rand(n,lu);%随机产生一个可行的初始控制。
Ul=0*ones(size(U));%控制下界
UM=0.2*ones(size(U));%控制上界为0.2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sb=[];
m=NO;
h=Nh;
tf=n*h;%末端时间
[Lt,La1,La,T]=OCFElagrange(linspace(0,h,m+2));%进行求解时需要的拉格朗日插值函数,La1为t=1时
pro=@(u)reshape(u,lu,length(u)/lu)';
ipro=@(u)reshape(u',numel(u),1);
U=ipro(U);Ul=ipro(Ul);UM=ipro(UM);
fun=@(U)funocfe(U,x0);[J,dJu,XX,XU]=fun(U); 
cfun=@(U)cfunocfe(U,x0);[ck,~,dck,~]=cfun(U);%梯度矩阵格式 dck(i,j)=cj/ui

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if 1
%对目标函数梯度计算的准确性进行检验，检验结果表示其对第一个控制变量的梯度是准确的，对第二个就不是了,经过修改，已经非常准确
U=0.3*Ul+0.7*UM;ep=1e-4;[f0,dJu]=fun(U);for i=1:length(U);Ui=U;Ui(i)=U(i)+ep;fi=fun(Ui);dli=(fi-f0)/ep;sb(i)=dli;end;
figure;hold on;plot(sb,'r*');plot(dJu,'o');legend('差分梯度','计算梯度')
%对约束条件ck梯度计算的准确性进行检验，检验结果表示其很准确
i=2;U=rand(size(Ul));ep=1e-4;[c0,~,dck,~]=cfun(U);Ui=U;Ui(i)=U(i)+ep;ci=cfun(Ui);dli=(ci-c0)/ep;sb=dli; 
figure;hold on;plot(sb,'r*');plot(dck(i,:),'o');legend('差分梯度','计算梯度')
%对dx/du，即XU的计算准确性进行检验，检验结果表明其非常准确
 i=2;[J,dJu,XX,XU]=funocfe(U,x0);ep=1e-4;Ui=U;Ui(i)=U(i)+ep; [J,dJu,XXi]=funocfe(Ui,x0);...
     li=XXi';li0=XX';dli=(li(:)-li0(:))/ep;sb=dli;
 figure;hold on;plot(sb,'r*');plot(XU(:,i),'o');legend('差分梯度','计算梯度')
end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
